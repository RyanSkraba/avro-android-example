import org.apache.avro.Schema
import org.apache.avro.compiler.idl.Idl
import org.apache.avro.compiler.specific.SpecificCompiler

buildscript {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath group: 'org.apache.avro', name: 'avro-tools', version: '1.11.0-SNAPSHOT'
    }
}

plugins {
    id 'com.android.application'
}

def avroFilesAvsc = fileTree('src/main/avro').include('**/*.avsc')
def avroFilesAvdl = fileTree('src/main/avro').include('**/*.avdl')
def generatedAvroSrc = "${project.projectDir.absolutePath}/build/generated/avro"

android {
    sourceSets {
        getByName("main") {
            java.srcDirs += generatedAvroSrc
        }
    }

    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "com.skraba.byexample.avroandroid"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'org.apache.avro:avro-android:1.11.0-SNAPSHOT'

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

tasks.register('generateAvro') {
    group = "build"

    inputs.files avroFilesAvsc
    inputs.files avroFilesAvdl
    outputs.dir generatedAvroSrc

    doLast {
        avroFilesAvsc.each { file ->
            Schema schema = Schema.parse(file)
            new SpecificCompiler(schema).compileToDestination(file, new File(generatedAvroSrc))
        }
        avroFilesAvdl.each { file ->
            Idl idl = new Idl(file)
            new SpecificCompiler(idl.CompilationUnit()).compileToDestination(file, new File(generatedAvroSrc))
        }
    }
}

preBuild.dependsOn generateAvro

clean {
    delete(generatedAvroSrc)
}
